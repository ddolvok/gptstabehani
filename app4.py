import streamlit as st
import openai
import requests
from PIL import Image
from io import BytesIO
import base64

def app():
    st.title("페이지4")
    st.write("여기는 페이지 4입니다.")

# Load API key from secrets.toml
gpt_api_key = st.secrets["gpt_api_key"]
stability_api_key = st.secrets["stability_api_key"]

# Set your GPT and Stability API keys
openai.api_key = gpt_api_key

def generate_response(user_input):
    user_role = "User: " + user_input
    system_role = "System: Make a picture that feels like Japan animation. I want to make Shinkai Makoto style images. Make a sentence around 150 characters. I want to get more detail and wide cut image. Answer in English!"

    messages = [{"role": "system", "content": system_role}, {"role": "user", "content": user_input}]

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        max_tokens=250,
        n=1,
        stop=None,
        temperature=0.7,
    )
    return response.choices[0].message['content']

def generate_image(prompt):
    api_host = "https://api.stability.ai"
    engine_id = "stable-diffusion-v1-5"
    url = f"{api_host}/v1/generation/{engine_id}/text-to-image"

    headers = {
        "Authorization": f"Bearer {stability_api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "height": 512,
        "width": 512,
        "text_prompts": [
            {
                "text": prompt,
                "weight": 0.5
            }
        ],
        "cfg_scale": 7,
        "clip_guidance_preset": "FAST_BLUE",
        "sampler": "K_DPM_2_ANCESTRAL",
        "samples": 1,
        "steps": 75,
    }

    response = requests.post(url, headers=headers, json=data)

    if response.status_code != 200:
        raise Exception("Non-200 response: " + str(response.text))

    return response.json()["artifacts"][0]["base64"]

def display_response(response):
    if response:
        st.markdown(response)

st.title("GPT + Stable Diffusion (Shinkai Makoto!)")

prompt_input = st.text_input("Enter an image description:")

if len(prompt_input) > 2:
    if st.button("Generate Image"):
        with st.spinner("GPT가 일하는 중입니다!"):
            response = generate_response(prompt_input)
            display_response(response)

            with st.spinner("Stable Diffusion is generating the image!"):
                base64_image_data = generate_image(response)
                img = Image.open(BytesIO(base64.b64decode(base64_image_data)))
                st.image(img, caption='Generated by Stable Diffusion', use_column_width=True)
else:
    if st.button("Generate Image"):
        st.markdown("3글자 이상 써주세요.")
