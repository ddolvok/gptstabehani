import streamlit as st
import openai
import requests
from PIL import Image
from io import BytesIO
import base64

# 페이지 설정
st.set_page_config(page_title="메인 메뉴", page_icon="smile")

def app1():

    # Load API key from secrets.toml
    gpt_api_key = st.secrets["gpt_api_key"]
    stability_api_key = st.secrets["stability_api_key"]

    # Set your GPT and Stability API keys
    openai.api_key = gpt_api_key

    def generate_response(user_input):
        user_role = "User: " + user_input
        system_role = "System: Make a picture that feels like a professional photograph. Adding professional, can greatly improve the color contrast and details in the image. But please avoid expressing people in detail. Make a sentence around 150 characters. Answer in English!"

        messages = [{"role": "system", "content": system_role}, {"role": "user", "content": user_input}]

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=250,
            n=1,
            stop=None,
            temperature=0.7,
        )
        return response.choices[0].message['content']

    def generate_image(prompt):
        api_host = "https://api.stability.ai"
        engine_id = "stable-diffusion-v1-5"
        url = f"{api_host}/v1/generation/{engine_id}/text-to-image"

        headers = {
            "Authorization": f"Bearer {stability_api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "height": 512,
            "width": 512,
            "text_prompts": [
                {
                    "text": prompt,
                    "weight": 0.5
                }
            ],
            "cfg_scale": 7,
            "clip_guidance_preset": "FAST_BLUE",
            "sampler": "K_DPM_2_ANCESTRAL",
            "samples": 1,
            "steps": 75,
        }

        response = requests.post(url, headers=headers, json=data)

        if response.status_code != 200:
            raise Exception("Non-200 response: " + str(response.text))

        return response.json()["artifacts"][0]["base64"]

    def display_response(response):
        if response:
            st.markdown(response)

    st.title("GPT + Stable Diffusion (Photographer!)")

    prompt_input = st.text_input("Enter an image description:")

    if len(prompt_input) > 2:
        if st.button("Generate Image"):
            with st.spinner("GPT가 일합니다!"):
                response = generate_response(prompt_input)
                display_response(response)

            with st.spinner("Stable Diffusion is generating the image!"):
                base64_image_data = generate_image(response)
                img = Image.open(BytesIO(base64.b64decode(base64_image_data)))
                st.image(img, caption='Generated by Stable Diffusion', use_column_width=True)
    else:
        if st.button("Generate Image"):
            st.markdown("3글자 이상 써주세요.")

def app2():

    # Load API key from secrets.toml
    gpt_api_key = st.secrets["gpt_api_key"]
    stability_api_key = st.secrets["stability_api_key"]

    # Set your GPT and Stability API keys
    openai.api_key = gpt_api_key

    def generate_response(user_input):
        user_role = "User: " + user_input
        system_role = "System: Please make the styles of famous landscape painters. there are painters like that  'Alejandro Bursido', 'Jacques-Laurent Agasse', 'Andreas Achenbach', 'Cuno Amiet'. Choose one of these artists at random and brainstorm an image that the artist might have thought of. Make a sentence around 150 characters. please answer in English!"

        messages = [{"role": "system", "content": system_role}, {"role": "user", "content": user_input}]

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=250,
            n=1,
            stop=None,
            temperature=0.7,
        )
        return response.choices[0].message['content']

    def generate_image(prompt):
        api_host = "https://api.stability.ai"
        engine_id = "stable-diffusion-v1-5"
        url = f"{api_host}/v1/generation/{engine_id}/text-to-image"

        headers = {
            "Authorization": f"Bearer {stability_api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "height": 512,
            "width": 512,
            "text_prompts": [
                {
                    "text": prompt,
                    "weight": 0.5
                }
            ],
            "cfg_scale": 7,
            "clip_guidance_preset": "FAST_BLUE",
            "sampler": "K_DPM_2_ANCESTRAL",
            "samples": 1,            
            "steps": 75,
        }

        response = requests.post(url, headers=headers, json=data)

        if response.status_code != 200:
            raise Exception("Non-200 response: " + str(response.text))

        return response.json()["artifacts"][0]["base64"]

    def display_response(response):
        if response:
            st.markdown(response)

    st.title("GPT + Stable Diffusion (Landscape Art!)")

    prompt_input = st.text_input("Enter an image description:")

    if len(prompt_input) > 2:
        if st.button("Generate Image"):
            with st.spinner("GPT가 일하는 중입니다!"):
                response = generate_response(prompt_input)
                display_response(response)

            with st.spinner("Stable Diffusion is generating the image!"):
                base64_image_data = generate_image(response)
                img = Image.open(BytesIO(base64.b64decode(base64_image_data)))
                st.image(img, caption='Generated by Stable Diffusion', use_column_width=True)
    else:
        if st.button("Generate Image"):
            st.markdown("3글자 이상 써주세요.")

def app3():

    # Load API key from secrets.toml
    gpt_api_key = st.secrets["gpt_api_key"]
    stability_api_key = st.secrets["stability_api_key"]

    # Set your GPT and Stability API keys
    openai.api_key = gpt_api_key

    def generate_response(user_input):
        user_role = "User: " + user_input
        system_role = "System: Make a picture that feels like 3D illustrations. With the most sophisticated, coolest illustration image. Make a sentence around 150 characters. I want to get more detail and wide cut image. Answer in English!"

        messages = [{"role": "system", "content": system_role}, {"role": "user", "content": user_input}]

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=250,
            n=1,
            stop=None,
            temperature=0.7,
        )
        return response.choices[0].message['content']

    def generate_image(prompt):
        api_host = "https://api.stability.ai"
        engine_id = "stable-diffusion-v1-5"
        url = f"{api_host}/v1/generation/{engine_id}/text-to-image"

        headers = {
            "Authorization": f"Bearer {stability_api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "height": 512,
            "width": 512,
            "text_prompts": [
                {
                    "text": prompt,
                    "weight": 0.5
                }
            ],
            "cfg_scale": 7,
            "clip_guidance_preset": "FAST_BLUE",
            "sampler": "K_DPM_2_ANCESTRAL",
            "samples": 1,            
            "steps": 75,
        }

        response = requests.post(url, headers=headers, json=data)

        if response.status_code != 200:
            raise Exception("Non-200 response: " + str(response.text))

        return response.json()["artifacts"][0]["base64"]

    def display_response(response):
        if response:
            st.markdown(response)

    st.title("GPT + Stable Diffusion (illustrations 3D!)")

    prompt_input = st.text_input("Enter an image description:")

    if len(prompt_input) > 2:
        if st.button("Generate Image"):
            with st.spinner("GPT가 일하는 중입니다!"):
                response = generate_response(prompt_input)
                display_response(response)

            with st.spinner("Stable Diffusion is generating the image!"):
                base64_image_data = generate_image(response)
                img = Image.open(BytesIO(base64.b64decode(base64_image_data)))
                st.image(img, caption='Generated by Stable Diffusion', use_column_width=True)
    else:
        if st.button("Generate Image"):
            st.markdown("3글자 이상 써주세요.")

def app4():

    # Load API key from secrets.toml
    gpt_api_key = st.secrets["gpt_api_key"]
    stability_api_key = st.secrets["stability_api_key"]

    # Set your GPT and Stability API keys
    openai.api_key = gpt_api_key

    def generate_response(user_input):
        user_role = "User: " + user_input
        system_role = "System: Make a picture that feels like Japan animation. I want to make Shinkai Makoto style images. Make a sentence around 150 characters. I want to get more detail and wide cut image. Answer in English!"

        messages = [{"role": "system", "content": system_role}, {"role": "user", "content": user_input}]

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=250,
            n=1,
            stop=None,
            temperature=0.7,
        )
        return response.choices[0].message['content']

    def generate_image(prompt):
        api_host = "https://api.stability.ai"
        engine_id = "stable-diffusion-v1-5"
        url = f"{api_host}/v1/generation/{engine_id}/text-to-image"

        headers = {
            "Authorization": f"Bearer {stability_api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "height": 512,
            "width": 512,
            "text_prompts": [
                {
                    "text": prompt,
                    "weight": 0.5
                }
            ],
            "cfg_scale": 7,
            "clip_guidance_preset": "FAST_BLUE",
            "sampler": "K_DPM_2_ANCESTRAL",
            "samples": 1,            
            "steps": 75,
        }

        response = requests.post(url, headers=headers, json=data)

        if response.status_code != 200:
            raise Exception("Non-200 response: " + str(response.text))

        return response.json()["artifacts"][0]["base64"]

    def display_response(response):
        if response:
            st.markdown(response)

    st.title("GPT + Stable Diffusion (Animation!)")

    prompt_input = st.text_input("Enter an image description:")

    if len(prompt_input) > 2:
        if st.button("Generate Image"):
            with st.spinner("GPT가 일하는 중입니다!"):
                response = generate_response(prompt_input)
                display_response(response)

            with st.spinner("Stable Diffusion is generating the image!"):
                base64_image_data = generate_image(response)
                img = Image.open(BytesIO(base64.b64decode(base64_image_data)))
                st.image(img, caption='Generated by Stable Diffusion', use_column_width=True)
    else:
        if st.button("Generate Image"):
            st.markdown("3글자 이상 써주세요.")

# 메인 로직 실행
def main():
    st.title("GPT Stable Diffusion (랩)")

    # 설명 박스
    st.markdown("""
    <div style="background-color:#eee; padding:10px 5px; border-radius:10; margin-bottom:20px;">
    <h6 style="text-align:center;">원하는 이미지 스타일을 선택하고 '단어' '문장'을 입력.</h6>
    </div>
    """, unsafe_allow_html=True)

    # 앱 선택 버튼
    app_name = st.selectbox("이미지 스타일 선택", ["All menu", "Real Photo", "유명 작가", "3D 일러스트레이션", "게임&애니메이션"])

    # 선택된 앱 실행
    if app_name == "All menu":
        st.markdown("### <span style='color:blue'>Photographer:</span> <small>'실사 사진' 만들 수 있어요.</small>", unsafe_allow_html=True)
        st.markdown("### <span style='color:green'>Painter:</span> <small>유명 작가 작풍을 카피할 수 있어요.</small>", unsafe_allow_html=True)
        st.markdown("### <span style='color:red'>Illustrator:</span> <small>3D 일러스트레이션에 도전해요.</small>", unsafe_allow_html=True)
        st.markdown("### <span style='color:purple'>Comics artist:</span> <small>만화 장면 스타일도해요.</small>", unsafe_allow_html=True)


    elif app_name == "Real Photo":
        app1()
    elif app_name == "유명 작가":
        app2()
    elif app_name == "3D 일러스트레이션":
        app3()
    elif app_name == "게임&애니메이션":
        app4()

if __name__ == "__main__":
    main()
